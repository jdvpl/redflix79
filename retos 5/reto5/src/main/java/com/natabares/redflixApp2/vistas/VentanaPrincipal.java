/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.natabares.redflixApp2.vistas;

import java.util.Optional;
import com.natabares.redflixApp2.RedflixApp2Application;
import com.natabares.redflixApp2.SpringContext;
import com.natabares.redflixApp2.modelos.Pelicula;
import com.natabares.redflixApp2.modelos.Serie;
import com.natabares.redflixApp2.modelos.Usuario;
import com.natabares.redflixApp2.repositorios.PeliculaRepositorio;
import com.natabares.redflixApp2.repositorios.SerieRepositorio;
import com.natabares.redflixApp2.repositorios.UsuarioRepositorio;
import java.util.List;


/**
 *
 * @author comer
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    PeliculaRepositorio peliculaRepositorio;
    SerieRepositorio serieRepositorio;
    UsuarioRepositorio usuarioRepositorio;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        setResizable(false);
        
        String [] args = {};
        RedflixApp2Application.runSpringServer(args);
        
        peliculaRepositorio = SpringContext.getBean(PeliculaRepositorio.class);
        serieRepositorio = SpringContext.getBean(SerieRepositorio.class);
        usuarioRepositorio = SpringContext.getBean(UsuarioRepositorio.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfNombreUser = new javax.swing.JTextField();
        btConsultarUser = new javax.swing.JButton();
        tfAliasUser = new javax.swing.JTextField();
        btLimpiar = new javax.swing.JButton();
        btCrearUser = new javax.swing.JButton();
        btEditarUser = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btEliminar = new javax.swing.JButton();
        lbPelicula = new javax.swing.JLabel();
        lbTituloPelicula = new javax.swing.JLabel();
        tfTituloPelicula = new javax.swing.JTextField();
        lbNombreUser = new javax.swing.JLabel();
        lbResumen = new javax.swing.JLabel();
        lbYearPelicula = new javax.swing.JLabel();
        tfYearPelicula = new javax.swing.JTextField();
        lbNombreDirector = new javax.swing.JLabel();
        tfResumenPelicula = new javax.swing.JTextField();
        tfNombreDirector = new javax.swing.JTextField();
        btCrearPelicula = new javax.swing.JButton();
        btConsultarPelicula = new javax.swing.JButton();
        btEditarPelicula = new javax.swing.JButton();
        btEliminarPelicula = new javax.swing.JButton();
        lbSerie = new javax.swing.JLabel();
        lbTituloSerie = new javax.swing.JLabel();
        tfTituloSerie = new javax.swing.JTextField();
        lbNumeroTemporadas = new javax.swing.JLabel();
        tfNumeroTemporadas = new javax.swing.JFormattedTextField();
        lbNumeroCapitulos = new javax.swing.JLabel();
        tfNumeroCapitulos = new javax.swing.JFormattedTextField();
        btCrearSerie = new javax.swing.JButton();
        btConsultarUsuario = new javax.swing.JButton();
        btEditarSerie = new javax.swing.JButton();
        btEliminarSerie = new javax.swing.JButton();
        lbNotificaciones = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RedFlix App G3M3E6");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Humnst777 BT", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("datos usuario");

        jLabel2.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        jLabel2.setText("alias");
        jLabel2.setToolTipText("");

        tfNombreUser.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        btConsultarUser.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btConsultarUser.setForeground(new java.awt.Color(255, 0, 0));
        btConsultarUser.setText("consultar");
        btConsultarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarUserActionPerformed(evt);
            }
        });

        tfAliasUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAliasUserActionPerformed(evt);
            }
        });

        btLimpiar.setText("Limpiar");
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        btCrearUser.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btCrearUser.setForeground(new java.awt.Color(255, 0, 0));
        btCrearUser.setText("crear");
        btCrearUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearUserActionPerformed(evt);
            }
        });

        btEditarUser.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btEditarUser.setForeground(new java.awt.Color(255, 0, 0));
        btEditarUser.setText("editar");
        btEditarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarUserActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Humnst777 BT", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("redflix app");

        btEliminar.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btEliminar.setForeground(new java.awt.Color(255, 0, 0));
        btEliminar.setText("eliminar");
        btEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarActionPerformed(evt);
            }
        });

        lbPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 14)); // NOI18N
        lbPelicula.setForeground(new java.awt.Color(255, 0, 0));
        lbPelicula.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPelicula.setText("datos película");

        lbTituloPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        lbTituloPelicula.setText("titulo");
        lbTituloPelicula.setToolTipText("");

        lbNombreUser.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        lbNombreUser.setText("nombre y apellidos");

        lbResumen.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        lbResumen.setText("resumen");

        lbYearPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        lbYearPelicula.setText("año");

        lbNombreDirector.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        lbNombreDirector.setText("director");

        tfResumenPelicula.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        btCrearPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btCrearPelicula.setForeground(new java.awt.Color(255, 0, 0));
        btCrearPelicula.setText("crear");
        btCrearPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearPeliculaActionPerformed(evt);
            }
        });

        btConsultarPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btConsultarPelicula.setForeground(new java.awt.Color(255, 0, 0));
        btConsultarPelicula.setText("consultar");
        btConsultarPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarPeliculaActionPerformed(evt);
            }
        });

        btEditarPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btEditarPelicula.setForeground(new java.awt.Color(255, 0, 0));
        btEditarPelicula.setText("editar");
        btEditarPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarPeliculaActionPerformed(evt);
            }
        });

        btEliminarPelicula.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btEliminarPelicula.setForeground(new java.awt.Color(255, 0, 0));
        btEliminarPelicula.setText("eliminar");
        btEliminarPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarPeliculaActionPerformed(evt);
            }
        });

        lbSerie.setFont(new java.awt.Font("Humnst777 BT", 0, 14)); // NOI18N
        lbSerie.setForeground(new java.awt.Color(255, 0, 0));
        lbSerie.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbSerie.setText("datos serie");

        lbTituloSerie.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        lbTituloSerie.setText("titulo");

        lbNumeroTemporadas.setText("# temporadas");

        tfNumeroTemporadas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        lbNumeroCapitulos.setText("# capitulos");

        tfNumeroCapitulos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        btCrearSerie.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btCrearSerie.setForeground(new java.awt.Color(255, 0, 0));
        btCrearSerie.setText("crear");
        btCrearSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearSerieActionPerformed(evt);
            }
        });

        btConsultarUsuario.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btConsultarUsuario.setForeground(new java.awt.Color(255, 0, 0));
        btConsultarUsuario.setText("consultar");
        btConsultarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarUsuarioActionPerformed(evt);
            }
        });

        btEditarSerie.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btEditarSerie.setForeground(new java.awt.Color(255, 0, 0));
        btEditarSerie.setText("editar");
        btEditarSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarSerieActionPerformed(evt);
            }
        });

        btEliminarSerie.setFont(new java.awt.Font("Humnst777 BT", 0, 11)); // NOI18N
        btEliminarSerie.setForeground(new java.awt.Color(255, 0, 0));
        btEliminarSerie.setText("eliminar");
        btEliminarSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarSerieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btCrearUser)
                .addGap(35, 35, 35)
                .addComponent(btConsultarUser)
                .addGap(43, 43, 43)
                .addComponent(btEditarUser)
                .addGap(48, 48, 48)
                .addComponent(btEliminar)
                .addGap(62, 62, 62))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btLimpiar))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(148, 148, 148))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfAliasUser, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(31, 31, 31)
                                    .addComponent(lbNombreUser)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(tfNombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTituloPelicula)
                                    .addComponent(lbYearPelicula))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(tfYearPelicula, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                            .addComponent(tfTituloPelicula))
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbResumen)
                                            .addComponent(lbNombreDirector))
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfNombreDirector)
                                            .addComponent(tfResumenPelicula)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(btEliminarSerie))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btCrearPelicula)
                                                .addGap(42, 42, 42)
                                                .addComponent(btConsultarPelicula)
                                                .addGap(45, 45, 45)
                                                .addComponent(btEditarPelicula)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btEliminarPelicula)))
                                        .addGap(14, 14, 14))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbTituloSerie)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btCrearSerie)
                                        .addGap(49, 49, 49)
                                        .addComponent(btConsultarUsuario)
                                        .addGap(50, 50, 50)
                                        .addComponent(btEditarSerie)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(tfTituloSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(39, 39, 39)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lbNumeroCapitulos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbNumeroTemporadas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfNumeroCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfNumeroTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(46, 46, 46)))))))
                .addGap(46, 46, 46))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(lbPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(tfAliasUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfNombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbNombreUser)))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btConsultarUser)
                    .addComponent(btCrearUser)
                    .addComponent(btEditarUser)
                    .addComponent(btEliminar))
                .addGap(29, 29, 29)
                .addComponent(lbPelicula)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbTituloPelicula)
                        .addComponent(lbResumen)
                        .addComponent(tfTituloPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfResumenPelicula))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbYearPelicula)
                    .addComponent(tfYearPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNombreDirector)
                    .addComponent(tfNombreDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCrearPelicula)
                    .addComponent(btConsultarPelicula)
                    .addComponent(btEditarPelicula)
                    .addComponent(btEliminarPelicula))
                .addGap(22, 22, 22)
                .addComponent(lbSerie)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTituloSerie)
                    .addComponent(tfTituloSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNumeroTemporadas)
                    .addComponent(tfNumeroTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNumeroCapitulos)
                    .addComponent(tfNumeroCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCrearSerie)
                    .addComponent(btConsultarUsuario)
                    .addComponent(btEditarSerie)
                    .addComponent(btEliminarSerie))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        lbNotificaciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lbNotificaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lbNotificaciones)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btConsultarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarUserActionPerformed
        if(!tfAliasUser.getText().equals("")){
            buscarPorUsuario();
            tfAliasUser.setEnabled(true);
        }
        else{
            lbNotificaciones.setText("No ha digitado ningun alias");
        }
    }//GEN-LAST:event_btConsultarUserActionPerformed

    private void tfAliasUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAliasUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAliasUserActionPerformed

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void btCrearUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCrearUserActionPerformed
        crearUser();
    }//GEN-LAST:event_btCrearUserActionPerformed

    private void btEditarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarUserActionPerformed
        editarUser();
    }//GEN-LAST:event_btEditarUserActionPerformed

    private void btEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarActionPerformed
        eliminarUser();
    }//GEN-LAST:event_btEliminarActionPerformed

    private void btCrearPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCrearPeliculaActionPerformed
        crearPelicula();
    }//GEN-LAST:event_btCrearPeliculaActionPerformed

    private void btConsultarPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarPeliculaActionPerformed
        consultarPelicula();
    }//GEN-LAST:event_btConsultarPeliculaActionPerformed

    private void btEditarPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarPeliculaActionPerformed
        editarPelicula();
    }//GEN-LAST:event_btEditarPeliculaActionPerformed

    private void btEliminarPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarPeliculaActionPerformed
        eliminarPelicula();
    }//GEN-LAST:event_btEliminarPeliculaActionPerformed

    private void btCrearSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCrearSerieActionPerformed
        crearSerie();
    }//GEN-LAST:event_btCrearSerieActionPerformed

    private void btConsultarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarUsuarioActionPerformed
        consultarSerie();
    }//GEN-LAST:event_btConsultarUsuarioActionPerformed

    private void btEditarSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarSerieActionPerformed
        editarSerie();
    }//GEN-LAST:event_btEditarSerieActionPerformed

    private void btEliminarSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarSerieActionPerformed
        eliminarSerie();
    }//GEN-LAST:event_btEliminarSerieActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConsultarPelicula;
    private javax.swing.JButton btConsultarUser;
    private javax.swing.JButton btConsultarUsuario;
    private javax.swing.JButton btCrearPelicula;
    private javax.swing.JButton btCrearSerie;
    private javax.swing.JButton btCrearUser;
    private javax.swing.JButton btEditarPelicula;
    private javax.swing.JButton btEditarSerie;
    private javax.swing.JButton btEditarUser;
    private javax.swing.JButton btEliminar;
    private javax.swing.JButton btEliminarPelicula;
    private javax.swing.JButton btEliminarSerie;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbNombreDirector;
    private javax.swing.JLabel lbNombreUser;
    private javax.swing.JLabel lbNotificaciones;
    private javax.swing.JLabel lbNumeroCapitulos;
    private javax.swing.JLabel lbNumeroTemporadas;
    private javax.swing.JLabel lbPelicula;
    private javax.swing.JLabel lbResumen;
    private javax.swing.JLabel lbSerie;
    private javax.swing.JLabel lbTituloPelicula;
    private javax.swing.JLabel lbTituloSerie;
    private javax.swing.JLabel lbYearPelicula;
    private javax.swing.JTextField tfAliasUser;
    private javax.swing.JTextField tfNombreDirector;
    private javax.swing.JTextField tfNombreUser;
    private javax.swing.JFormattedTextField tfNumeroCapitulos;
    private javax.swing.JFormattedTextField tfNumeroTemporadas;
    private javax.swing.JTextField tfResumenPelicula;
    private javax.swing.JTextField tfTituloPelicula;
    private javax.swing.JTextField tfTituloSerie;
    private javax.swing.JTextField tfYearPelicula;
    // End of variables declaration//GEN-END:variables

 private void buscarPorUsuario() {
        
        String aliasUser = tfAliasUser.getText();
        Optional<Usuario> optionalUsuario = usuarioRepositorio.findById(aliasUser);
        if(optionalUsuario.isPresent()){
            Usuario usuario = optionalUsuario.get();
            tfNombreUser.setText(usuario.getNombreUser());
                        
            lbNotificaciones.setText("Bienvenido a redflix " + tfAliasUser.getText());
            System.out.println("Bienvenido a redflix " + tfAliasUser.getText());
        }
        else{
            // Error cuando no existe el id
            lbNotificaciones.setText(
                    "El usuario " + tfAliasUser.getText() + 
                            " no está registrado en RedFlix");
            System.out.println("El usuario " + tfAliasUser.getText() + 
                    "no está registrado en redflix");
        }
    }
 
    public void limpiarCampos(){
        tfAliasUser.setText("");
        tfNombreUser.setText("");
        lbNotificaciones.setText("");
        tfTituloPelicula.setText("");
        tfResumenPelicula.setText("");
        tfYearPelicula.setText("");
        tfNombreDirector.setText("");
        tfTituloSerie.setText("");
        tfNumeroTemporadas.setText("");
        tfNumeroCapitulos.setText("");
    }
    
    private Usuario obtenerDatosDeUsuario(){
       Usuario usuario = new Usuario();
       usuario.setAliasUser(tfAliasUser.getText());
       usuario.setNombreUser(tfNombreUser.getText());
       return usuario;
    }
    
    private void crearUser() {
        Usuario usuario = obtenerDatosDeUsuario();
        String aliasUser;
        StringBuffer respuesta = new StringBuffer();
        if(!tfAliasUser.getText().equals("")){
            aliasUser = usuario.getAliasUser();
            Optional<Usuario> optionalUsuario = usuarioRepositorio.findById(aliasUser);
            if(optionalUsuario.isPresent()){
                respuesta.append("Lo sentimos el usuario no se encuentra disponible");
            }
            else{
                usuarioRepositorio.save(usuario);
                limpiarCampos();
                respuesta.append("Se registró exitosamente el usuario " + aliasUser);
            }    
        } else {
            respuesta.append("Por favor digite un alias");
        }
        
        try{
            lbNotificaciones.setText(respuesta.toString());
            System.out.println(respuesta.toString());
        }
        catch(Exception e)
        {
            lbNotificaciones.setText("Ocurrio un error al guardar");
        }
    }
    
    private void editarUser() {
        Usuario usuario = obtenerDatosDeUsuario();
        String aliasUser;
        StringBuffer respuesta = new StringBuffer();
        if(!tfAliasUser.getText().equals("")){
            aliasUser = usuario.getAliasUser();
            Optional<Usuario> optionalUsuario = usuarioRepositorio.findById(aliasUser);
            if(optionalUsuario.isPresent()){
                usuarioRepositorio.save(usuario);
                limpiarCampos();
                respuesta.append("Se actualizó correctamente el usuario " + aliasUser);
            }
            else{
                respuesta.append("El usuario no está registrado.  ¡Registrate en redflix app!");
            }    
        } else {
            respuesta.append("Por favor digite un alias");
        }
        
        try{
            lbNotificaciones.setText(respuesta.toString());
            System.out.println(respuesta.toString());
        }
        catch(Exception e)
        {
            lbNotificaciones.setText("Ocurrio un error al actualizar");
        }
       
    }
    
    private void eliminarUser(){
        Usuario usuario = obtenerDatosDeUsuario();
        String aliasUser;
        StringBuffer respuesta = new StringBuffer();
        if(!tfAliasUser.getText().equals("")){
            aliasUser = usuario.getAliasUser();
            Optional<Usuario> optionalUsuario = usuarioRepositorio.findById(aliasUser);
            if(optionalUsuario.isPresent()){
                usuarioRepositorio.delete(usuario);
                limpiarCampos();
                respuesta.append("Se eliminó correctamente el usuario " + aliasUser);
            }
            else{
                respuesta.append("El usuario no está registrado.  ¡Registrate en redFlix app!");
            }    
        } else {
            respuesta.append("Por favor digite un alias");
        }
        
        try{
            lbNotificaciones.setText(respuesta.toString());
            System.out.println(respuesta.toString());
        }
        catch(Exception e)
        {
            lbNotificaciones.setText("Ocurrio un error al actualizar");
        }
    }
    
    private Pelicula obtenerDatosDePelicula(){
       Pelicula pelicula = new Pelicula();
       pelicula.setTituloPelicula(tfTituloPelicula.getText());
       pelicula.setResumenPel(tfResumenPelicula.getText());
       pelicula.setYearPel(Integer.parseInt(tfYearPelicula.getText()));
       pelicula.setNombreDirector(tfNombreDirector.getText());
       return pelicula;
    }
     
    private Long buscarIdPorTituloPelicula(){
        Pelicula pelicula = new Pelicula();
        List<Pelicula> peliculas = peliculaRepositorio.findAll();
        Long id = null;
        for (int i=0; i<peliculas.size(); i++){
            pelicula = peliculas.get(i);
            if (pelicula.getTituloPelicula().equalsIgnoreCase(tfTituloPelicula.getText())){
                id = pelicula.getIdPelicula();
            }
        }
        return id;
    }
    
    private Long buscarUltimoIdPelicula(){
        Pelicula pelicula = new Pelicula();
        List<Pelicula> peliculas = peliculaRepositorio.findAll();
        int n = 1000;
        Long id = new Long(n);
        for (int i=0; i<peliculas.size(); i++){
            pelicula = peliculas.get(i);
            if (id<pelicula.getIdPelicula()){
                id=pelicula.getIdPelicula();
            }
        }
        return id;
    }
    
    private void crearPelicula() {
        Pelicula pelicula = new Pelicula();
        Long id = buscarIdPorTituloPelicula();
        if (id == null) {
            pelicula = obtenerDatosDePelicula();
            Long ultimoId = buscarUltimoIdPelicula();
            ultimoId = ultimoId +1;
            pelicula.setIdPelicula(ultimoId);
            try{
                peliculaRepositorio.save(pelicula);
                lbNotificaciones.setText("Se registró correctamente la película " + tfTituloPelicula.getText());
                System.out.println("Se registró correctamente la película " + tfTituloPelicula.getText());
            } catch (Exception e){
                lbNotificaciones.setText("Ocurrió un error al crear la película");
            }
        } else {
            lbNotificaciones.setText("La película ya está registrada");
        }
        
    }
    
    private void consultarPelicula() {
        
        if (!tfTituloPelicula.getText().equals("")){
            Pelicula pelicula1 = new Pelicula();
            Long id = buscarIdPorTituloPelicula();
            if (id == null) {
                lbNotificaciones.setText("La película no se encuentra registrada en redflix");
            } else {
                Optional<Pelicula> pelicula = peliculaRepositorio.findById(id);
                if (pelicula.isPresent()){
                    pelicula1 = pelicula.get();
                    tfResumenPelicula.setText(pelicula1.getResumenPel());
                    tfYearPelicula.setText(String.valueOf(pelicula1.getYearPel()));
                    tfNombreDirector.setText(pelicula1.getNombreDirector());
                    lbNotificaciones.setText("Pelicula disponible: " + tfTituloPelicula.getText());
                    System.out.println("Pelicula disponible " + tfTituloPelicula.getText());
                } else {
                    lbNotificaciones.setText("La película no se encuentra registrada en redflix");
                }
            } 
        } else {
            lbNotificaciones.setText("Digite el título de una película");
        }
    }
    private void editarPelicula(){
        if (!tfTituloPelicula.equals("")){
            Pelicula pelicula1 = new Pelicula();
            Long id = buscarIdPorTituloPelicula();
            Optional<Pelicula> pelicula = peliculaRepositorio.findById(id);
            if (pelicula.isPresent()){
                pelicula1 = obtenerDatosDePelicula();
                pelicula1.setIdPelicula(id);
                try {
                    peliculaRepositorio.save(pelicula1);
                    lbNotificaciones.setText("Se actualizó correctamente la película " + tfTituloPelicula.getText());
                    System.out.println("Se actualizó correctamente la película " + tfTituloPelicula.getText());
                } catch (Exception e){
                    lbNotificaciones.setText("Ocurrió un error al editar la película");
                }
            } 
        } else {
            lbNotificaciones.setText("Digite el título de una película");
        }
    }
       
    private void eliminarPelicula(){
        if (!tfTituloPelicula.getText().equals("")){
            Pelicula pelicula1 = new Pelicula();
            Long id = buscarIdPorTituloPelicula();
            Optional<Pelicula> pelicula = peliculaRepositorio.findById(id);
            if (pelicula.isPresent()){
                pelicula1 = pelicula.get();
                try {
                    peliculaRepositorio.delete(pelicula1);
                    lbNotificaciones.setText("Se eliminó exitosamente la película " + tfTituloPelicula.getText());
                    System.out.println("Se eliminó exitosamente la película " + tfTituloPelicula.getText());
                } catch (Exception e){
                    lbNotificaciones.setText("Ocurrió un error al eliminar la película");
                }
            }
        } else {
            lbNotificaciones.setText("Digite el título de una película");
        }
    }
    
    private Serie obtenerDatosDeSerie(){
       Serie serie = new Serie();
       serie.setTituloSerie(tfTituloSerie.getText());
       serie.setTemporadasSerie(Integer.parseInt(tfNumeroTemporadas.getText()));
       serie.setCapitulosSerie(Integer.parseInt(tfNumeroCapitulos.getText()));
       return serie;
    }
    
    private Long buscarIdPorTituloSerie(){
        Serie serie = new Serie();
        List<Serie> series = serieRepositorio.findAll();
        Long id = null;
        for (int i=0; i<series.size(); i++){
            serie = series.get(i);
            if (serie.getTituloSerie().equalsIgnoreCase(tfTituloSerie.getText())){
                id = serie.getIdSerie();
            }
        }
        return id;
    }
    
    private Long buscarUltimoIdSerie(){
        Serie serie = new Serie();
        List<Serie> series = serieRepositorio.findAll();
        int n = 2000;
        Long id = new Long(n);
        for (int i=0; i<series.size(); i++){
            serie = series.get(i);
            if (id<serie.getIdSerie()){
                id=serie.getIdSerie();
            }
        }
        return id;
    }
    private void crearSerie(){
        Serie serie = new Serie();
        Long id = buscarIdPorTituloSerie();
        if (id == null) {
            serie = obtenerDatosDeSerie();
            Long ultimoId = buscarUltimoIdSerie();
            ultimoId = ultimoId +1;
            serie.setIdSerie(ultimoId);
            try{
                serieRepositorio.save(serie);
                lbNotificaciones.setText("Se registró correctamente la serie " + tfTituloSerie.getText());
                System.out.println("Se registró correctamente la serie " + tfTituloSerie.getText());
            } catch (Exception e){
                lbNotificaciones.setText("Ocurrió un error al crear la serie");
            }
        } else {
            lbNotificaciones.setText("La serie ya está registrada");
        }
    }
    
    private void consultarSerie() {
        
        if (!tfTituloSerie.getText().equals("")){
            Serie serie1 = new Serie();
            Long id = buscarIdPorTituloSerie();
            Optional<Serie> serie = serieRepositorio.findById(id);
            if (serie.isPresent()){
                serie1 = serie.get();
                tfNumeroTemporadas.setText(String.valueOf(serie1.getTemporadasSerie()));
                tfNumeroCapitulos.setText(String.valueOf(serie1.getCapitulosSerie()));
                lbNotificaciones.setText("Serie disponible: " + tfTituloSerie.getText());
                System.out.println("Serie disponible " + tfTituloSerie.getText());
            } else{
                lbNotificaciones.setText("Serie no registrada en redflix");
            }
        } else {
            lbNotificaciones.setText("Digite el título de una serie");
            
        }
    }
    
    private void editarSerie(){
        if (!tfTituloSerie.equals("")){
            Serie serie1 = new Serie();
            Long id = buscarIdPorTituloSerie();
            Optional<Serie> serie = serieRepositorio.findById(id);
            if (serie.isPresent()){
                serie1 = obtenerDatosDeSerie();
                serie1.setIdSerie(id);
                try {
                    serieRepositorio.save(serie1);
                    lbNotificaciones.setText("Se actualizó correctamente la serie " + tfTituloSerie.getText());
                    System.out.println("Se actualizó correctamente la serie " + tfTituloSerie.getText());
                } catch (Exception e){
                    lbNotificaciones.setText("Ocurrió un error al editar la serie");
                }
            } 
        } else {
            lbNotificaciones.setText("Digite el título de una serie");
        }
    }
    
    private void eliminarSerie(){
        if (!tfTituloSerie.getText().equals("")){
            Serie serie1 = new Serie();
            Long id = buscarIdPorTituloSerie();
            Optional<Serie> serie = serieRepositorio.findById(id);
            if (serie.isPresent()){
                serie1 = serie.get();
                try {
                    serieRepositorio.delete(serie1);
                    lbNotificaciones.setText("Se eliminó exitosamente la serie " + tfTituloSerie.getText());
                    System.out.println("Se eliminó exitosamente la serie " + tfTituloSerie.getText());
                } catch (Exception e){
                    lbNotificaciones.setText("Ocurrió un error al eliminar la serie");
                }
            }
        } else {
            lbNotificaciones.setText("Digite el título de una serie");
        }
    }
}